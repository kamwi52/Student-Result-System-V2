<?php

namespace App\Http\Controllers\Teacher;

use App\Http\Controllers\Controller;
use App\Models\Result;
use App\Models\Assignment;
use App\Models\User; // Ensure User model is imported
use App\Models\ClassSection; // Ensure ClassSection is imported for grading scale
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\View\View;
// You might also have DB or Log imports here if other methods use them

class ResultController extends Controller
{
    /**
     * Helper to get remark from score using grading scale.
     * This logic is reusable for both edit and update.
     */
    protected function getRemarkFromScore($score, $classSection)
    {
        $remark = null;
        if ($classSection && $classSection->gradingScale) {
            // Eager load grades if not already loaded
            $classSection->loadMissing('gradingScale.grades'); 
            
            // Find the grade range the score falls into
            $grade = $classSection->gradingScale->grades->first(function ($g) use ($score) {
                return $score >= $g->min_score && $score <= $g->max_score;
            });
            if ($grade && $grade->remark) {
                $remark = $grade->remark;
            }
        }
        return $remark;
    }

    /**
     * Show the form for editing a single result.
     */
    public function edit(Assignment $assignment, Result $result): View
    {
        $teacher = Auth::user();

        // Security check: Ensure the teacher owns this assignment
        if ($assignment->teacher_id !== $teacher->id) {
            abort(403, 'Unauthorized: This assignment is not yours.');
        }

        // Security check: Ensure the result belongs to this assignment and class section
        if ($result->assignment_id !== $assignment->id || $result->class_section_id !== $assignment->class_section_id) {
            abort(403, 'Unauthorized: Result mismatch for this assignment or class.');
        }

        // Eager load necessary relationships for the view
        $result->load('student'); 
        $assignment->load('classSection'); // Load classSection for assignment if needed

        // --- NEW: Calculate auto-generated remark for display ---
        $autoGeneratedRemark = null;
        $classSection = $assignment->classSection; // Get classSection directly from loaded assignment
        if ($result->score !== null) { // Only generate remark if there's a score
            $autoGeneratedRemark = $this->getRemarkFromScore($result->score, $classSection);
        }
        // --- END NEW ---

        // Pass autoGeneratedRemark to the view
        return view('teacher.results.edit', compact('assignment', 'result', 'autoGeneratedRemark'));
    }

    /**
     * Update a single result.
     */
    public function update(Request $request, Result $result)
    {
        $teacher = Auth::user();

        // Validate input
        $validated = $request->validate([
            'score' => 'required|numeric|min:0|max:100', // Match max marks of assessment if needed
            'remark' => 'nullable|string|max:255', // User can provide a custom remark
        ]);

        // Security check: Ensure the teacher owns the assignment related to this result
        $assignment = Assignment::find($result->assignment_id); // Get the assignment from the result
        if (!$assignment || $assignment->teacher_id !== $teacher->id) {
            abort(403, 'Unauthorized: You are not authorized to update this result.');
        }

        // --- NEW: Apply auto-generation logic for the remark ---
        $finalRemark = $validated['remark'] ?? null; // Start with user-provided remark
        
        // If the user's provided remark is empty, try to auto-generate one
        if (empty(trim($finalRemark ?? ''))) { // Use trim to handle spaces
            $classSection = $assignment->classSection; // Get classSection directly from assignment
            $finalRemark = $this->getRemarkFromScore($validated['score'], $classSection);
        }
        // --- END NEW ---

        $result->update([
            'score' => $validated['score'],
            'remark' => $finalRemark, // Use the final (potentially auto-generated) remark
        ]);

        // Redirect back to the main results overview for that assignment/assessment
        return redirect()->route('teacher.gradebook.results', [
            'assignment' => $assignment->id, 
            'assessment' => $result->assessment_id // Correctly get assessment_id from $result
        ])->with('success', 'Result updated successfully.');
    }

    // You may also have an 'index' method here if you have a list of *your* results as a teacher
    // or other methods. Ensure they are all inside this Teacher namespace.
}